// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TUPLE_H_
#define FLATBUFFERS_GENERATED_TUPLE_H_

#include "flatbuffers/flatbuffers.h"

struct Hash;

struct Tuple;
struct TupleBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Hash FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t bytes_[32];

 public:
  Hash()
      : bytes_() {
  }
  Hash(flatbuffers::span<const uint8_t, 32> _bytes) {
    flatbuffers::CastToArray(bytes_).CopyFromSpan(_bytes);
  }
  const flatbuffers::Array<uint8_t, 32> *bytes() const {
    return &flatbuffers::CastToArray(bytes_);
  }
};
FLATBUFFERS_STRUCT_END(Hash, 32);

struct Tuple FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TupleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOAD = 4,
    VT_LOAD_AVG_1 = 6,
    VT_LOAD_AVG_5 = 8,
    VT_LOAD_AVG_15 = 10
  };
  float load() const {
    return GetField<float>(VT_LOAD, 0.0f);
  }
  float load_avg_1() const {
    return GetField<float>(VT_LOAD_AVG_1, 0.0f);
  }
  float load_avg_5() const {
    return GetField<float>(VT_LOAD_AVG_5, 0.0f);
  }
  float load_avg_15() const {
    return GetField<float>(VT_LOAD_AVG_15, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LOAD, 4) &&
           VerifyField<float>(verifier, VT_LOAD_AVG_1, 4) &&
           VerifyField<float>(verifier, VT_LOAD_AVG_5, 4) &&
           VerifyField<float>(verifier, VT_LOAD_AVG_15, 4) &&
           verifier.EndTable();
  }
};

struct TupleBuilder {
  typedef Tuple Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_load(float load) {
    fbb_.AddElement<float>(Tuple::VT_LOAD, load, 0.0f);
  }
  void add_load_avg_1(float load_avg_1) {
    fbb_.AddElement<float>(Tuple::VT_LOAD_AVG_1, load_avg_1, 0.0f);
  }
  void add_load_avg_5(float load_avg_5) {
    fbb_.AddElement<float>(Tuple::VT_LOAD_AVG_5, load_avg_5, 0.0f);
  }
  void add_load_avg_15(float load_avg_15) {
    fbb_.AddElement<float>(Tuple::VT_LOAD_AVG_15, load_avg_15, 0.0f);
  }
  explicit TupleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Tuple> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tuple>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tuple> CreateTuple(
    flatbuffers::FlatBufferBuilder &_fbb,
    float load = 0.0f,
    float load_avg_1 = 0.0f,
    float load_avg_5 = 0.0f,
    float load_avg_15 = 0.0f) {
  TupleBuilder builder_(_fbb);
  builder_.add_load_avg_15(load_avg_15);
  builder_.add_load_avg_5(load_avg_5);
  builder_.add_load_avg_1(load_avg_1);
  builder_.add_load(load);
  return builder_.Finish();
}

inline const Tuple *GetTuple(const void *buf) {
  return flatbuffers::GetRoot<Tuple>(buf);
}

inline const Tuple *GetSizePrefixedTuple(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tuple>(buf);
}

inline bool VerifyTupleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tuple>(nullptr);
}

inline bool VerifySizePrefixedTupleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tuple>(nullptr);
}

inline void FinishTupleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tuple> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTupleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tuple> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TUPLE_H_
